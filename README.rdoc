= Beacon

Simple observers and notifiers for your code.

The library aims to provide the simplest implementation possible. You get 
<i>beacons</i>, which are always global and can be "lit up". Whenever you
light a beacon up, everyone watching will act as instructed.

== How to use this?

Whenever you want to fire an event from your code, call <tt>Beacon.fire</tt>:

    def do_something
      Beacon.fire(:before_doing_something)
      # do your thing
    end

In order to register listeners for that event, call <tt>Beacon.watch</tt>:

    Beacon.watch :before_doing_something do
      logger.info "I'm about to do something"
    end

Each time you call <tt>watch</tt> with a given name, you register a different
handler for that name. Each time you call <tt>fire</tt> <b>all</b> handlers
for that event are run, in the order they were registered.

== Passing arguments

If you want to pass arguments to the watchers, just pass them along in
<tt>Beacon.fire</tt>:

    Beacon.fire(:an_event, "cuack", 3)

And you'll get them as arguments on the block that handles the message:

    Beacon.watch :an_event do |object, index|
      # here object == "cuack", index == 3
    end

== Advanced handlers

Instead of blocks, <tt>Beacon.watch</tt> can receive any object that responds
to <tt>call</tt>, so if you need any advanced logic in your handlers, you can
declare them like this:

    class MyHandler
      def call(foo, bar=0)
        puts foo.inspect, bar
      end
    end

    Beacon.watch :an_event, MyHandler.new

== Installing with rubygems

    gem install beacon

== Contributing

Clone our git repo from <tt>git://github.com/foca/beacon.git</tt>. The preffered
way to send a patch is to push to a clone of the repo on github[http://github.com]
but if you want to mail me a patch or point me to a diff I won't complain. Though
I'll probably take more to apply it :)

== Authors

Code written by foca[http://github.com/foca], with the help and ideas of
halorgium[http://github.com/halorgium], and tizoc[http://github.com/tizoc].

The code is licensed under an MIT license. Check the LICENSE file for details.
